#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdbool.h>
#include <math.h>
#include <opencv2/opencv.hpp>
#include <opencv/highgui.h>

// グリッドのサイズ（10x10のグリッド）とセルのサイズ（100x100ピクセル）
#define GRID_SIZE 10
#define CELL_SIZE 100
#define WIDTH (GRID_SIZE * CELL_SIZE)  // 画面の幅（グリッドの幅 * セルのサイズ）
#define HEIGHT (GRID_SIZE * CELL_SIZE)  // 画面の高さ（グリッドの高さ * セルのサイズ）

// ノード構造体
typedef struct nodes {
    int cost;           // 現在のノードまでのコスト（スタートノードからの移動コスト）
    int heuristic;      // ヒューリスティックコスト（ゴールノードまでの推定コスト）
    int total_cost;     // 総コスト（cost + heuristic）
    bool available;     // このセルが通行可能かどうか（障害物か通路か）
    int x, y;           // ノードの位置（x座標、y座標）
    struct nodes* parent;  // このノードの親ノードへのポインタ（経路をたどるため）
} Nodes;

// 画像の宣言と、ノード、スタートノード、ゴールノード、経路表示フラグの設定
IplImage* img;  // 画像データの格納先
Nodes node[GRID_SIZE][GRID_SIZE];  // グリッド（2D配列）のノード
Nodes* start_node;  // スタートノードのポインタ
Nodes* goal_node;   // ゴールノードのポインタ

bool show_path = false;  // 経路表示フラグ。A*アルゴリズムの結果が表示されるかどうか


void A_star() {
    // オープンリスト（探索待ちのノード）とクローズリスト（探索済みのノード）
    // オープンリストの最大サイズ
    // すべてのノードを最初は探索していないと設定
    // オープンリストに入っているノードの数
    // スタートノードのコストとヒューリスティックを設定
    // スタートノードの移動コストは0
    // マンハッタン距離
    // 総コスト（移動コスト + ヒューリスティック）
    // スタートノードをオープンリストに追加
    // オープンリストが空でない限り繰り返す
    // オープンリスト内の最小の総コストを持つノードを探す
    // 最小コストノードのインデックスを更新
    // 最小コストノードをオープンリストから取り出す
    // 取り出したノードをオープンリストから削除
    // ゴールノードに到達した場合、探索終了
    // 現在のノードをクローズリストに追加
    // 4方向（上下左右）の隣接ノードをチェック
    // 新しいノードがグリッド外の場合はスキップ
    // 障害物がある場合、または既に探索済みの場合はスキップ
     // 隣接ノードのポインタを取得
    // 新しいコスト（1マス進むため）
    // 新しいコストが現在のノードより小さい場合、または親ノードが設定されていない場合に親ノードを更新
     // 新しいコストを設定
    // ヒューリスティックを再計算
     // 総コストを更新
    // 親ノードを現在のノードに設定
    // 新しいノードをオープンリストに追加
}
